#!/usr/bin/env ruby

# GLOBAL IDENTIFIER
$shell_mode = false

require File.expand_path('../lib/client', File.dirname(__FILE__))
require File.expand_path('../lib/configurator', File.dirname(__FILE__))
require File.expand_path('../lib/parser/adapters/thor',    File.dirname(__FILE__))
require File.expand_path('../lib/shell/context', File.dirname(__FILE__))
require File.expand_path('../lib/shell/domain/context_entity', File.dirname(__FILE__))
require File.expand_path('../lib/shell/domain/active_context', File.dirname(__FILE__))
require File.expand_path('../lib/shell/domain/context_params', File.dirname(__FILE__))
require File.expand_path('../lib/shell/domain/override_tasks', File.dirname(__FILE__))
require File.expand_path('../lib/commands/thor/account', File.dirname(__FILE__))
require File.expand_path('../lib/shell/parse_monkey_patch', File.dirname(__FILE__))
require File.expand_path('../lib/shell/help_monkey_patch', File.dirname(__FILE__))


require 'shellwords'

$: << "/usr/lib/ruby/1.8/" #TODO: put in to get around path problem in rvm 1.9.2 environment

config_exists = ::DTK::Client::Configurator.check_config_exists
::DTK::Client::Configurator.check_git
::DTK::Client::Configurator.create_missing_clone_dirs


# check if .add_direct_access file exists, if not then add direct access and create .add_direct_access file
resolve_direct_access(::DTK::Client::Configurator.check_direct_access, config_exists)
entries = []

if ARGV.size > 0
  entries = ARGV
  entries = DTK::Shell::Context.check_for_sym_link(entries)
  entity_name = entries.shift
end

# special case for when no params are provided use help method
if (entity_name == 'help' || entity_name.nil?)
  entity_name = 'dtk'
  args = ['help']
else
  args = entries
end

context = DTK::Shell::Context.new(true)

begin
  entity_name, method_name, context_params, thor_options = context.get_dtk_command_parameters(entity_name, args)

  top_level_execute(entity_name, method_name, context_params, thor_options, false)
rescue DTK::Client::DtkError => e
  DtkLogger.instance.error(e.message, true)
rescue Exception => e
  DtkLogger.instance.error_pp(e.message, e.backtrace)
end
